exam1 notes 10/22/13

1. 4 parts - 25 pts  MEDIUM
2. 2 parts - 11 pts  EASY
3. 3 parts - 19 pts  MED/HARD

50 pts total

we can have hand-written cheat sheets

_____________
TOPICS
_____________


star of the show



Sequences - using and implementing
--queues
--stacks (on stacks on stacks)

Maps
--trees

recursion - for trees doe
--printing trees
--yeah

Linked Lists


________________
supporting roles

Node tree implementation
dynamic arrays


________________
walk-on roles

copy constructors

class structures (private, public)

circular arrays

_______________________________________________________________________________
_______________________________________________________________________________

//reverse  a list using function calls
void Sequence::reverse()
{
	Stack s;

	while (head != NULL) {
		s.push(removeFront());
	}

	while (!s.isEmpty()) {
		addfront(s.pop());
	}
}


//reverse a list only using iterators and ptr manipulation
void Sequence::reverse()
{
	if (head == NULL || head -> next == NULL) {
		return;
	}

	Node* iterback = head;
	Node* itermiddle = head->next;
	head->next = NULL;
	Node* iterfront = itermiddle->next;


	while (itermiddle != NULL) {
		itermiddle->next = iterback;
		
		if (iterfront != NULL) {
			iterback = itermiddle;
			itermiddle = iterfront; 
			iterfront = iterfront->next;
		}
	}
	head = iterback;
}


bool Sequence::isSubsequence(Sequence s)
{
	bool answer = false;
	Node* iter1 = head;
	Node* iter2 = s.head;

    //NEED OUTER LOOP --- while (iter0 != NULL)
	while (iter1 != NULL && iter2 != NULL && iter1->data != iter2->data){

		iter1 = iter1->next;
	}
}